# print in a bfs traversal 

# print shorts path between two nodes



graph ={
"A":["B","C"],
"B":["M","D","F","A"],
"C":["A","G"],
"D":["B"],   
"F":["B","G"],   
"G":["F","C","H"],
"H":["G","I"],   
"I":["H"],
"M":["B"]       
}

graph2 ={
"A":["B"],
"B":["M","D","F","A"],
"C":["G"],
"D":["B"],   
"F":["B","G"],   
"G":["F","C","H"],
"H":["G","I"],   
"I":["H"],
"M":["B"]       
}
start = "A"
def bfs(graph,start):
    seen = set()
    queue = []
    seen.add(start)
    queue.append(start)

    while queue:
        elem = queue.pop(0)

        print(elem , end = " ---> ")

        for neighbour in graph[elem]:
            if neighbour not in seen:
                seen.add(neighbour)
                queue.append(neighbour)

def shortest_path(graph,start,end):
    seen = set()
    queue = []
    seen.add(start)
    queue.append((start,-1))
    while queue:
        elem,dist = queue.pop(0)
        dist += 1
        if elem == end:
            print(dist)

        for neighbour in graph[elem]:
            if neighbour not in seen:
                seen.add(neighbour)
                queue.append((neighbour,dist))
        


shortest_path(graph,"B","H")   #return 3 
shortest_path(graph,"M","H") 
shortest_path(graph,"I","A")
shortest_path(graph,"D","I") 
shortest_path(graph2,"A","C") 